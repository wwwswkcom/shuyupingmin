{"remainingRequest":"/Users/xurunjie/Documents/flutter/ws/shuyupingmin/node_modules/babel-loader/lib/index.js!/Users/xurunjie/Documents/flutter/ws/shuyupingmin/src/router/index.js","dependencies":[{"path":"/Users/xurunjie/Documents/flutter/ws/shuyupingmin/src/router/index.js","mtime":1718015946506},{"path":"/Users/xurunjie/Documents/flutter/ws/shuyupingmin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xurunjie/Documents/flutter/ws/shuyupingmin/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
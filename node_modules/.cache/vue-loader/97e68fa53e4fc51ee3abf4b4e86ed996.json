{"remainingRequest":"/Users/xurunjie/Documents/flutter/ws/yanxitang/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xurunjie/Documents/flutter/ws/yanxitang/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/xurunjie/Documents/flutter/ws/yanxitang/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xurunjie/Documents/flutter/ws/yanxitang/src/components/CommonForm/index.vue?vue&type=template&id=7d24397c&scoped=true&","dependencies":[{"path":"/Users/xurunjie/Documents/flutter/ws/yanxitang/src/components/CommonForm/index.vue","mtime":1716171993825},{"path":"/Users/xurunjie/Documents/flutter/ws/yanxitang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xurunjie/Documents/flutter/ws/yanxitang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/xurunjie/Documents/flutter/ws/yanxitang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xurunjie/Documents/flutter/ws/yanxitang/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}